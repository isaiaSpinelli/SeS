#!/bin/bash
ROOTFSLOC=ramfs
echo "Start build initramfs"
cd $HOME
mkdir $ROOTFSLOC

echo "Create dirs"
mkdir -p $ROOTFSLOC/{bin,dev,etc,home,lib,lib64,newroot,proc,root,sbin,sys,run} # add run for cryptsetup 

echo "Create devices"
cd $ROOTFSLOC/dev
sudo mknod null c 1 3
sudo mknod tty c 5 0
sudo mknod console c 5 1
sudo mknod random c 1 8
sudo mknod urandom c 1 9
sudo mknod mmcblk0p b 179 0
sudo mknod mmcblk0p1 b 179 1
sudo mknod mmcblk0p2 b 179 2
sudo mknod mmcblk0p3 b 179 3
sudo mknod mmcblk0p4 b 179 4
sudo mknod ttyS0 c 4 64
sudo mknod ttyS1 c 4 65
sudo mknod ttyS2 c 4 66
sudo mknod ttyS3 c 4 67

echo "build /bin"

cd ../bin
cp ~/workspace/nano/buildroot/output/target/bin/busybox .
ln -s busybox ls
ln -s busybox mkdir
ln -s busybox ln
ln -s busybox mknod
ln -s busybox mount
ln -s busybox umount
ln -s busybox sh
ln -s busybox sleep
ln -s busybox dmesg
cp ~/workspace/nano/buildroot/output/target/usr/bin/strace .

echo "build /sbin"

cd ../sbin
ln -s ../bin/busybox switch_root
#cryptsetup
cp ~/workspace/nano/buildroot/output/target/usr/sbin/cryptsetup .

echo "build /lib64"

cd ../lib64
cp ~/workspace/nano/buildroot/output/target/lib64/ld-2.30.so .
cp ~/workspace/nano/buildroot/output/target/lib64/libresolv-2.30.so .
cp ~/workspace/nano/buildroot/output/target/lib64/libc-2.30.so .
ln -s libresolv-2.30.so libresolv.so.2
ln -s libc-2.30.so libc.so.6
ln -s ../lib64/ld-2.30.so ld-linux-aarch64.so.1

# cryptsetup
cp ~/workspace/nano/buildroot/output/target/lib/libm.so.6 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libcryptsetup.so.12 .

cp ~/workspace/nano/buildroot/output/target/usr/lib/libpopt.so.0 .
cp ~/workspace/nano/buildroot/output/target/lib/libuuid.so.1 .
cp ~/workspace/nano/buildroot/output/target/lib/libblkid.so.1 .
cp ~/workspace/nano/buildroot/output/target/lib/libpthread.so.0 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libdevmapper.so.1.02 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libssl.so.1.1 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libcrypto.so.1.1 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libjson-c.so.4 .
cp ~/workspace/nano/buildroot/output/target/lib/libdl.so.2 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libatomic.so.1 .

cp ~/workspace/nano/buildroot/output/target/usr/lib/libargon2.so.1 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libdw.so.1 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libgcc_s.so.1 .
cp ~/workspace/nano/buildroot/output/target/lib/librt.so.1 .

# strace 
cp ~/workspace/nano/buildroot/output/target/usr/lib/libelf.so.1 .
cp ~/workspace/nano/buildroot/output/target/usr/lib/libz.so.1 .

echo "build /lib"

cd ../lib
cp ~/workspace/nano/buildroot/output/target/lib64/ld-2.30.so .
ln -s ../lib64/ld-2.30.so ld-linux-aarch64.so.1



echo "build inti script"

cd ..
cat > init << endofinput
#!/bin/busybox sh
mount -t proc none /proc
mount -t sysfs none /sys
mount -t ext4 /dev/mmcblk0p2 /newroot
mount -n -t devtmpfs devtmpfs /newroot/dev

# monte et switch sur la partition root LUKS
cryptsetup --debug --key-size 512 --key-file /home/file_passphare open --type luks /dev/mmcblk0p3 usr_luks
mkdir  /newroot_luks
mount /dev/mapper/usr_luks /newroot_luks
exec switch_root /newroot_luks /sbin/init

# au cas ou il y a une erreur, ouvre un shell
exec sh
#exec switch_root /newroot /sbin/init

endofinput
######
chmod 755 init

# add file with passphare for root partition LUKS
echo "Copie File passphare"

cd ./home
cp /home/lmi/workspace/SeS/file_passphare .

echo "change owner"

cd ..
sudo chown -R 0:0 $ROOTFSLOC

echo "cpio"
cd $ROOTFSLOC
find . | cpio --quiet -o -H newc > ../Initrd

echo "gzip"
cd ..
gzip -9 -c Initrd > Initrd.gz

echo "mkimage"
mkimage -A arm -T ramdisk -C none -d Initrd.gz uInitrd
